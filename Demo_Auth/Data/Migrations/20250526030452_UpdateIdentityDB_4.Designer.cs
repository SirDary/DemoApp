// <auto-generated />
using System;
using Demo_Auth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demo_Auth.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    [Migration("20250526030452_UpdateIdentityDB_4")]
    partial class UpdateIdentityDB_4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Demo_Auth.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("NumberPhone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("number_phone");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.HasKey("EmployeeId")
                        .HasName("employees_pkey");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.TaskComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment_content");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("CommentId")
                        .HasName("task_comments_pkey");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("task_comments", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_create");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("TaskAuthor")
                        .HasColumnType("integer")
                        .HasColumnName("task_author");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_title");

                    b.Property<int?>("TasksStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("tasks_status_id");

                    b.HasKey("TaskId")
                        .HasName("tasks_pkey");

                    b.HasIndex("TaskAuthor");

                    b.HasIndex("TasksStatusId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.TasksStatus", b =>
                {
                    b.Property<int>("TasksStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tasks_status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TasksStatusId"));

                    b.Property<string>("TasksStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tasks_status_name");

                    b.HasKey("TasksStatusId")
                        .HasName("tasks_status_pkey");

                    b.ToTable("tasks_status", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.UserMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_create");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("image");

                    b.Property<string>("MessageContext")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_context");

                    b.Property<int?>("ReplyToMessage")
                        .HasColumnType("integer")
                        .HasColumnName("reply_to_message");

                    b.Property<string>("Video")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("video");

                    b.HasKey("MessageId")
                        .HasName("user_message_pkey");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReplyToMessage");

                    b.ToTable("user_message", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.UserPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostId"));

                    b.Property<string>("PostName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("post_name");

                    b.HasKey("PostId")
                        .HasName("user_posts_pkey");

                    b.ToTable("user_posts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskExecutor", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("integer")
                        .HasColumnName("executor_id");

                    b.HasKey("TaskId", "ExecutorId")
                        .HasName("task_executor_pkey");

                    b.HasIndex("ExecutorId");

                    b.ToTable("task_executor", (string)null);
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.Employee", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.AppUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Demo_Auth.Data.Models.Employee", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo_Auth.Data.Models.UserPost", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("employees_post_id_fkey");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.TaskComment", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.Employee", "Employee")
                        .WithMany("TaskComments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("task_comments_employee_id_fkey");

                    b.HasOne("Demo_Auth.Data.Models.Tasks", "Tasks")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("task_comments_task_id_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.Tasks", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.Employee", "TaskAuthorNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskAuthor")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("tasks_task_author_fkey");

                    b.HasOne("Demo_Auth.Data.Models.TasksStatus", "TasksStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TasksStatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("tasks_tasks_status_id_fkey");

                    b.Navigation("TaskAuthorNavigation");

                    b.Navigation("TasksStatus");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.UserMessage", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.Employee", "Employee")
                        .WithMany("UserMessages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("user_message_employee_id_fkey");

                    b.HasOne("Demo_Auth.Data.Models.UserMessage", "ReplyToMessageNavigation")
                        .WithMany("InverseReplyToMessageNavigation")
                        .HasForeignKey("ReplyToMessage")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("user_message_reply_to_message_fkey");

                    b.Navigation("Employee");

                    b.Navigation("ReplyToMessageNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo_Auth.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskExecutor", b =>
                {
                    b.HasOne("Demo_Auth.Data.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("task_executor_executor_id_fkey");

                    b.HasOne("Demo_Auth.Data.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("task_executor_task_id_fkey");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.AppUser", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.Employee", b =>
                {
                    b.Navigation("TaskComments");

                    b.Navigation("Tasks");

                    b.Navigation("UserMessages");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.Tasks", b =>
                {
                    b.Navigation("TaskComments");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.TasksStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.UserMessage", b =>
                {
                    b.Navigation("InverseReplyToMessageNavigation");
                });

            modelBuilder.Entity("Demo_Auth.Data.Models.UserPost", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
